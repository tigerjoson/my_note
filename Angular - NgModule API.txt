<!DOCTYPE html>
<html> reference:angular document
	<head>
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
	</head>
	<body >
		
		NgModule metadata properties.
		<table class="table table-bordered">
			<tbody><tr>
				<th>
					Property
				</th>
				<th>
					Description
				</th>
			</tr>
			<tr>
				<td style="vertical-align: top">
					declarations
				</td>
				<td>
					A list of <a href="https://angular.io/guide/ngmodule-faq#q-declarable">declarable</a> classes,
					(components, directives, and pipes) that belong to this module.
					<ol>
						<li>When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives.</li>
						<li>
							The template is compiled within the context of an NgModule—the NgModule within which the template's component is declared—which determines the set of selectors using the following rules:
							<ul>
								<li>All selectors of directives listed in `declarations`.</li>
								<li>All selectors of directives exported from imported NgModules.</li>
							</ul>
						</li>
					</ol>
					Components, directives, and pipes must belong to exactly one module.
					The compiler emits an error if you try to declare the same class in more than one module.
					Don't re-declare a class imported from another module.
				</td>
			</tr>
			<tr>
				<td style="vertical-align: top">
					providers
				</td>
				<td>
					A list of dependency-injection providers.<br>
					Angular registers these providers with the NgModule's injector.<br>
					If it is the NgModule used for bootstrapping then it is the root injector.<br>
					These services become available for injection into any component, directive, pipe or service which is a child of this injector.<br>
					A lazy-loaded module has its own injector which is typically a child of the application root injector.<br>
					Lazy-loaded services are scoped to the lazy module's injector.<br>
					If a lazy-loaded module also provides the UserService,
					any component created within that module's context (such as by router navigation)
					gets the local instance of the service, not the instance in the root application injector.
					Components in external modules continue to receive the instance provided by their injectors.
					For more information on injector hierarchy and scoping, see <a href="https://angular.io/guide/providers">Providers</a>.
				</td>
			</tr>
			<tr>
				<td style="vertical-align: top">
					imports
				</td>
				<td>
					A list of modules which should be folded into this module. <br>
					Folded means it is as if all the imported NgModule's exported properties were declared here.<br>
					Specifically, it is as if the list of modules whose exported components, directives, or pipes
					are referenced by the component templates were declared in this module.<br>
					A component template can <a href="https://angular.io/guide/ngmodule-faq#q-template-reference">reference</a>
					another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it.<br>
					
					For example, a component can use the NgIf and NgFor directives only if the module has imported the Angular CommonModule 
					( perhaps indirectly by importing BrowserModule.
					You can import many standard directives from the CommonModule but some familiar directives belong to other modules ).<br>
					For example, you can use ngModel only after importing the Angular FormsModule .
				</td>
			</tr>
			<tr>
				<td style="vertical-align: top">
					exports
				</td>
				<td>
					A list of declarations—component, directive, and pipe classes—that
					an importing module can use.
					Exported declarations are the module's public API.
					A component in another module can <a href="https://angular.io/guide/ngmodule-faq#q-template-reference">use</a> this
					module's UserComponent if it imports this module and this module exports UserComponent.
					Declarations are private by default.
					If this module does not export UserComponent, then only the components within this
					module can use UserComponent.
					Importing a module does not automatically re-export the imported module's imports.
					Module 'B' can't use <a href="https://angular.io/api/common/NgIf" class="p-anchor">ngIf</a> just because it imported module 'A' which imported <a href="https://angular.io/api/common/CommonModule" class="p-anchor">CommonModule</a>.
					Module 'B' must import <a href="https://angular.io/api/common/CommonModule" class="p-anchor">CommonModule</a> itself.
					A module can list another module among its exports, in which case
					all of that module's public components, directives, and pipes are exported.
					<a href="https://angular.io/guide/ngmodule-faq#q-reexport">Re-export</a> makes module transitivity explicit.
					If Module 'A' re-exports <a href="https://angular.io/api/common/CommonModule" class="p-anchor">CommonModule</a> and Module 'B' imports Module 'A',
					Module 'B' components can use <a href="https://angular.io/api/common/NgIf" class="p-anchor">ngIf</a> even though 'B' itself didn't import <a href="https://angular.io/api/common/CommonModule" class="p-anchor">CommonModule</a>.
				</td>
			</tr>
			<tr>
				<td style="vertical-align: top">
					bootstrap
				</td>
				<td>
					A list of components that are automatically bootstrapped.
					Usually there's only one component in this list, the root component of the application.
					Angular can launch with multiple bootstrap components,
					each with its own location in the host web page.
					A bootstrap component is automatically added to entryComponents.
				</td>
			</tr>
			<tr>
				<td style="vertical-align: top">
					entryComponents
				</td>
				<td>
					A list of components that can be dynamically loaded into the view.
					By default, an Angular app always has at least one entry component, the root component, AppComponent. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.
					Routed components are also entry components because they need to be loaded dynamically.
					The router creates them and drops them into the DOM near a &lt;<a href="https://angular.io/api/router/RouterOutlet" class="p-anchor">router-outlet</a>&gt;.
					While the bootstrapped and routed components are entry components,
					you don't have to add them to a module's entryComponents list,
					as they are added implicitly.
					Angular automatically adds components in the module's bootstrap and route definitions into the entryComponents list.
					That leaves only components bootstrapped using one of the imperative techniques, such as <a href="https://angular.io/api/core/ViewContainerRef#createComponent">ViewComponentRef.createComponent()</a> as undiscoverable.
					Dynamic component loading is not common in most apps beyond the router. If you need to dynamically load components, you must add these components to the entryComponents list yourself.
					For more information, see <a href="https://angular.io/guide/entry-components">Entry Components</a>.
				</td>
			</tr>
			</tbody></table>
			<hr>
			
	</div>
	
